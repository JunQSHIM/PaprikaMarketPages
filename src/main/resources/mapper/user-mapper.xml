<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="userDB">
	<select id="selectUserAll" resultType="UserVO">
		select * from user;
	</select>
	<select id="selectUser" parameterType="string"
		resultType="UserVO">
		select * from user where id=#{value}
	</select>
	<select id="idCheck" parameterType="String" resultType="int">
		select count(*) from user where id = #{id}
	</select>
	<select id="emailCheck" parameterType="String" resultType="int">
		select count(*) from user where email = #{email}
	</select>
	<!-- 닉네임 중복체 -->
	<select id="nicknameCheck" parameterType="String"
		resultType="int">
		select count(*) from user where nickname = #{nickname}
	</select>
	<select id="phoneCheck" parameterType="String" resultType="int">
		select count(*) from user where phone = #{phone}
	</select>
	<select id="insertUser">
		insert into
		user(id,name,password,nickname,email,birth,phone,msg_agree,available,profile_image)
		values(#{id},#{name},#{password},#{nickname},#{email},#{birth},#{phone},#{msg_agree},1,#{profile_image})
		ON DUPLICATE KEY UPDATE id= #{id};
	</select>
	<!-- 게시판 -->
	<select id="boardList" resultType="SellBoardVO">
		select * from product order by
		prod_seq desc;
	</select>
	<!-- 게시판 글 쓰기 -->
	<select id="insertSell" resultType="SellBoardVO">
		insert into
		product(nickname,location, prod_title, prod_content, price,
		category_seq,
		upload_date, status)
		values('닉네임1234','서울',#{prod_title},#{prod_content},#{price},(select
		category_name from category where category_seq =
		#{category_seq}),now(),1);
	</select>
	
	<!-- 게시판 상품 상세보기 -->
	<select id="sellDetail" parameterType="int"
		resultType="SellBoardVO">
		select * from product where prod_seq = #{prod_seq};
	</select>
	<!-- 게시판 삭제하기 -->
	<select id="sellDelete" resultType="SellBoardVO">
		delete from product where
		prod_seq = #{prod_seq};
	</select>

	<!-- 상품 리스트 -->
	<select id="postList" resultType="PostVO">
		select * from post order by
		post_seq desc;
	</select>
	
	<!-- 상품 등록 -->
	<select id="post" resultType="PostVO">
		insert into post(user_seq,
		nickname, post_title,post_content,price,location1, location2,
		category_seq,
		upload_date, create_date, pay_check, prod_status)
		values(#{user_seq},#{nickname},#{post_title},
		#{post_content}, #{price},(select location1 from user where user_seq = #{user_seq}),(select location2 from user where user_seq = #{user_seq}),#{category_seq},now(),now(),#{pay_check}, #{prod_status});
	</select>
	
	<!-- 판매상품 삭제하기 -->
	<select id="postDelete" resultType="PostVO">
		delete from post where
		post_seq = #{post_seq};
	</select>

	<!-- 판매상품 수정하기 -->
	<select id="updatePost" resultType="PostVO">
		update post set post_title =
		#{post_title}, price = #{price}, post_content=#{post_content}, prod_status = #{prod_status}, upload_date = now()
		create_date = now() where post_seq = #{post_seq};
	</select>

	<!-- 상품 등록 상세 보기 -->
	<select id="postDetail" parameterType="int" resultType="PostVO">
		select *
		from post where post_seq = #{post_seq};
	</select>
	
	<!-- 사진등록 -->
	<insert id="insertPhoto" parameterType="PhotoVO">
		insert into post_photo
		(post_seq, origin_file_name, saved_file_name, create_time)
		values
		(#{post_seq}, #{o_name}, #{s_name}, now());
	</insert>
	
	<!-- 사진 선택 -->
	<select id="selectPhoto" resultType="String">
		select saved_file_name from post_photo where post_seq = #{post_seq};
	</select>
	
	<select id="selectDelete" resultType="String">
		select substr((select saved_file_name from
		post_photo where post_seq = #{post_seq}), 55);
	</select>
	
	<!-- 미리보기 사진  -->
	<select id="selectOnePhoto" resultType="String">
		select saved_file_name from post_photo where post_seq = #{post_seq} order by create_time desc limit 0,1;
	</select>
	
	<delete id="deletePhoto">
		delete from post_photo where post_seq = #{post_seq};
	</delete>
	
	<!-- 최신 상품 등록 페이지 번호 추출 -->
	<select id="selectPostUser" resultType="int">
		select post_seq from post
		where user_seq = #{user_seq} order by upload_date desc limit 0,1;
	</select>

	<!-- 좋아요 구현 -->
	<!-- 좋아요 눌렀는지 안 눌렀는지 -->
	<select id="likeCount" parameterType="LikeVO" resultType="int">
		select
		count(*) from likePost where post_seq = #{post_seq} and user_seq =
		#{user_seq};
	</select>
	<!-- 좋아요 없는 경우 -->
	<insert id="likeInsert" parameterType="LikeVO">
		insert into
		likePost(user_seq, post_seq) values(#{user_seq},#{post_seq});
	</insert>

	<!-- 좋아요가 있는 경우 -->
	<select id="likeGetInfo" resultType="int" parameterType="LikeVO">
		select
		likeCnt from likePost where post_seq = #{post_seq} and user_seq =
		#{user_seq};
	</select>
	<!-- 좋아요 누르기 -->
	<update id="likeUpdate" parameterType="LikeVO">
		update likePost set
		<include refid="cal"></include>
		where post_seq = #{post_seq} and user_seq = #{user_seq};
	</update>
	
	<sql id="cal">
		<if test="likeCnt == 1">
			likeCnt = 0
		</if>
		<if test="likeCnt == 0">
			likeCnt = likeCnt + 1
		</if>
	</sql>


	<!-- 조회수 증가 -->
	<update id="viewCount">
		update post set cnt = cnt + 1 where post_seq =
		#{post_seq};
	</update>

	<!-- 카테고리 리스트 -->
	<select id="categoryList" resultType="CategoryVO">
		select * from category;
	</select>

	<!-- 카테고리별 상품 보기 -->
	<select id="categoryDetail" parameterType="int"
		resultType="PostVO">
		select * from post where category_seq = #{category_seq}
		order by post_seq desc;
	</select>

	<!-- 카테고리 이름 -->
	<select id="categoryName" resultType="CategoryVO">
		select category_name where
		category_seq = #{category_seq};
	</select>


	<!-- 카테고리별 게시물 수 -->
	<select id="countCate" resultType="int">
		select count(post_seq) from post where category_seq = #{category_seq};
	</select>

	<!-- 게시물 총 개수 -->
	<select id="count" resultType="int">
		select count(*) from post
        
        <if test="keyword != null">
            where post_title like concat('%',#{keyword},'%')
        </if>
	</select>
	
	<!-- 게시물 목록 + 페이징 -->
	<select id="listPage" parameterType="hashMap"
		resultType="PostVO">
		select * from (
                select post_seq, post_title, price, upload_date, pay_check, location1  
                from post
                <if test="keyword != null">
           			 where ${post_title} like concat('%',#{keyword},'%')
       			</if>
                order by post_seq desc) as T1
        		limit #{displayPost},#{postNum}
	</select>
	
	<!-- 카테고리 목록 + 페이징 -->
	<select id="catePage" parameterType="hashMap"
		resultType="PostVO">
		select * from post where category_seq = #{category_seq} order by post_seq desc limit #{displayPost}, #{postNum}
	</select>

	<!-- 정보 찾기 -->
	<select id="findKakao" parameterType="java.util.HashMap"
		resultType="UserVO">
		select * from user where nickname=#{nickname}
	</select>

	<!-- 정보 저장 -->
	<insert id="kakaoInsert" parameterType="java.util.HashMap">
		insert into
		user(id,name,password,birth,nickname,email,phone,msg_agree,join_type,profile_image,available,mail_auth)
		values(#{email},#{nickname},#{password},'1111-01-01',#{nickname},#{email},'PHONE',0,1,#{profile_image},1,1)
	</insert>

	<update id="locationInsert" parameterType="UserVO">
		update user set
		location1=#{location1},location2=#{location2} where id=#{id}
	</update>


	<update id="updateProfile" parameterType="UserVO">
		update user set
		password=#{password}, nickname=#{nickname} where id=#{id}
	</update>


	<update id="reloadUser" parameterType="UserVO">
		update user set
		birth=#{birth}, available=#{available} where id=#{id}
	</update>
	
	<update id="updatePw" >
		update user set password = #{password} where email = #{email}
	</update>
	
	<update id="updateMailKey" parameterType="UserVO">
    	update user set mail_key=#{mail_key} where email=#{email}
	</update>
	
	<update id="updateMailAuth" parameterType="UserVO">
    	update user set mail_auth=1 where email=#{email} and mail_key=#{mail_key}
	</update>
	
	<select id="emailAuthFail" parameterType="String" resultType="int">
    	select count(*) from user where id=#{id} and mail_auth=1
	</select>
</mapper>
