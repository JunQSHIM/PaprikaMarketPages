<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="userDB">
	<select id="selectUserAll" resultType="UserVO">
		select * from user;
	</select>
	<select id="selectByNickname" resultType="UserVO">
		select * from user
		where nickname=#{nickname}
	</select>
	<select id="selectUser" parameterType="string"
		resultType="UserVO">
		select * from user where id=#{value}
	</select>
	<select id="idCheck" parameterType="String" resultType="int">
		select
		count(*) from user where id = #{id}
	</select>
	<select id="emailCheck" parameterType="String" resultType="int">
		select count(*) from user where email = #{email}
	</select>
	<!-- 닉네임 중복체 -->
	<select id="nicknameCheck" parameterType="String"
		resultType="int">
		select count(*) from user where nickname = #{nickname}
	</select>
	<select id="phoneCheck" parameterType="String" resultType="int">
		select count(*) from user where phone = #{phone}
	</select>
	<select id="insertUser">
		insert into
		user(id,name,password,nickname,email,birth,phone,msg_agree,available,profile_image,create_date)
		values(#{id},#{name},#{password},#{nickname},#{email},#{birth},#{phone},#{msg_agree},1,#{profile_image}, now())
		ON DUPLICATE KEY UPDATE id= #{id};
	</select>

	<delete id="withdrawal">
		delete from user where id = #{id} and password =
		#{password};
	</delete>

	<!-- 게시판 글 쓰기 -->
	<select id="insertboard" resultType="UserBoardVO">
		insert into
		board(user_seq,
		title, content, create_date)
		values(#{user_seq}, #{title},
		#{content},now());
	</select>
	<!-- 게시판 사진 등록 -->
	<insert id="insertboardPhoto" parameterType="PhotoVO">
		insert into
		board_photo
		(board_seq, origin_file_name, saved_file_name, create_time)
		values
		(#{post_seq},
		#{o_name}, #{s_name}, now());
	</insert>

	<!-- 게시판 상품 상세보기 -->
	<select id="boardDetail" parameterType="int"
		resultType="UserBoardVO">
		select * from board where board_seq = #{board_seq};
	</select>
	<!-- 게시판 삭제하기 -->
	<select id="boardDelete" resultType="UserBoardVO">
		delete from product where
		prod_seq = #{prod_seq};
	</select>

	<!-- 회원 탈퇴를 위한 판매하기 삭제 -->
	<select id="withdrawalPost" resultType="int">
		select * from withdrawal where user_seq = #{user_seq};
	</select>

	<!-- 사진삭제 게시판 -->
	<delete id="deletePhotoBoard">
		delete from board_photo where board_seq =
		#{board_seq};
	</delete>

	<select id="selectDeleteBoard" resultType="String">
		select substring_index
		(saved_file_name, '/' ,-2) as saved_file_name from
		(select
		saved_file_name from board_photo where board_seq
		=${board_seq})photo_name;
	</select>

	<!-- 미리보기 사진 게시판 -->
	<select id="selectOnePhotoBoard" resultType="String">
		select
		saved_file_name from board_photo where board_seq = #{board_seq} order
		by create_time desc limit 0,1;
	</select>

	<!-- 사진 불러오기 게시판 -->
	<select id="selectboardPhoto" resultType="String">
		select saved_file_name
		from board_photo where board_seq = #{board_seq};
	</select>

	<!-- 최신 게시판 -->
	<select id="selectBoardNew" resultType="int">
		select board_seq from
		board
		where user_seq = #{user_seq} order by create_date desc limit 0,1;
	</select>

	<!-- 게시판 총 개수 -->
	<select id="countBoard" resultType="int">
		select count(board_seq) from board
		<if test="user_seq != 0">
			where user_seq=#{user_seq}
		</if>
	</select>

	<!-- 게시판 목록 + 페이징 -->
	<select id="listBoardPage" parameterType="UserBoardPageVO"
		resultType="UserBoardVO">
		select * from board
		<if test="user_seq != 0">
			where user_seq=#{user_seq}
		</if>
		order by board_seq desc limit #{displayPost}, #{postNum}
	</select>

	<!-- 상품 리스트 -->
	<select id="postList" resultType="PostVO">
		select * from post order by
		post_seq desc;
	</select>

	<!-- 상품 등록 -->
	<select id="post" resultType="PostVO">
		insert into post(user_seq,
		nickname, post_title,post_content,price,location1, location2,
		category_seq,
		upload_date, create_date, pay_check, prod_status, pay)
		values(#{user_seq},#{nickname},#{post_title},
		#{post_content},
		#{price},(select location1 from user where user_seq =
		#{user_seq}),(select location2 from user where user_seq =
		#{user_seq}),#{category_seq},now(),now(),#{pay_check}, #{prod_status},
		#{pay});
	</select>

	<!-- 판매상품 삭제하기 -->
	<delete id="postDelete" >
		delete from post where
		post_seq = #{post_seq};
	</delete>

	<!-- 판매상품 수정하기 -->
	<select id="updatePost" resultType="PostVO">
		update post set post_title =
		#{post_title}, price = #{price}, post_content=#{post_content},
		prod_status = #{prod_status}, upload_date = now()
		create_date = now()
		where post_seq = #{post_seq};
	</select>

	<!-- 상품 등록 상세 보기 -->
	<select id="postDetail" parameterType="int" resultType="PostVO">
		select *
		from post where post_seq = #{post_seq};
	</select>

	<!-- 사진등록 -->
	<insert id="insertPhoto" parameterType="PhotoVO">
		insert into post_photo
		(post_seq, origin_file_name, saved_file_name, create_time)
		values
		(#{post_seq}, #{o_name}, #{s_name}, now());
	</insert>

	<!-- 사진 선택 -->
	<select id="selectPhoto" resultType="String">
		select saved_file_name from
		post_photo where post_seq = #{post_seq};
	</select>

	<select id="selectDelete" resultType="String">
		select substring_index
		(saved_file_name, '/' ,-2) as saved_file_name from
		(select
		saved_file_name from post_photo where post_seq
		=${post_seq})photo_name;
	</select>

	<!-- 미리보기 사진 -->
	<select id="selectOnePhoto" resultType="String">
		select saved_file_name
		from post_photo where post_seq = #{post_seq} order by create_time desc
		limit 0,1;
	</select>

	<delete id="deletePhoto">
		delete from post_photo where post_seq = #{post_seq};
	</delete>

	<!-- 최신 상품 등록 페이지 번호 추출 -->
	<select id="selectPostUser" resultType="int">
		select post_seq from post
		where user_seq = #{user_seq} order by upload_date desc limit 0,1;
	</select>

	<!-- 좋아요 구현 -->
	<!-- 좋아요 눌렀는지 안 눌렀는지 -->
	<select id="likeCount" parameterType="LikeVO" resultType="int">
		select
		count(likeCnt) from likePost where post_seq = #{post_seq} and user_seq
		=
		#{user_seq};
	</select>
	<!-- 좋아요 없는 경우 -->
	<insert id="likeInsert" parameterType="LikeVO">
		insert into
		likePost(user_seq, post_seq) values(#{user_seq},#{post_seq});
	</insert>

	<!-- 좋아요가 있는 경우 -->
	<select id="likeGetInfo" resultType="int" parameterType="LikeVO">
		select
		likeCnt from likePost where post_seq = #{post_seq} and user_seq =
		#{user_seq};
	</select>
	<!-- 좋아요 누르기 -->
	<update id="likeUpdate" parameterType="LikeVO">
		update likePost set
		<if test="count == 1">
			likeCnt = 0
		</if>
		<if test="count == 0">
			likeCnt = likeCnt + 1
		</if>
		where post_seq = #{post_seq} and user_seq = #{user_seq};
	</update>

	<!-- 좋아요 눌린 개수 -->
	<select id="allLike" parameterType="LikeVO" resultType="int">

		select
		count(likeCnt) from (select * from likePost where post_seq =
		#{post_seq}) as lk where likeCnt = 1;
	</select>

	<!-- 찜목록 -->
	<select id="jjimCart" parameterType="LikeVO" resultType="int">
		select
		count(*) from likePost a, post b where a.post_seq = b.post_seq
		and
		likeCnt = 1 and a.user_seq = #{user_seq};
	</select>

	<!-- 찜한 게시판 불러오기 -->
	<select id="jjimList" parameterType="PageVO" resultType="PostVO">
		select *
		from likePost a, post b where a.post_seq = b.post_seq and
		likeCnt = 1
		and a.user_seq = #{user_seq}
		<if test="sort == null">
			order by b.post_seq desc
		</if>
		<if test="sort == 1">
			order by b.post_seq desc
		</if>
		<if test="sort == 2">

		</if>
		<if test="sort == 3">
			order by b.price ASC
		</if>
		<if test="sort == 4">
			order by b.price desc
		</if>
		limit #{displayPost}, #{postNum};
	</select>

	<!-- 찜 목록 삭제 -->
	<delete id="jjimDelete" parameterType="LikeVO">
		delete from likePost where
		post_seq = #{post_seq} and user_seq=#{user_seq};
	</delete>


	<!-- 조회수 증가 -->
	<update id="viewCount">
		update post set cnt = cnt + 1 where post_seq =
		#{post_seq};
	</update>

	<!-- 카테고리 리스트 -->
	<select id="categoryList" resultType="CategoryVO">
		select * from category;
	</select>

	<!-- 카테고리별 상품 보기 -->
	<select id="categoryDetail" parameterType="int"
		resultType="PostVO">
		select * from post where category_seq = #{category_seq}
		order by post_seq desc;
	</select>

	<!-- 카테고리 이름 -->
	<select id="categoryName" resultType="CategoryVO">
		select category_name where
		category_seq = #{category_seq};
	</select>


	<!-- 카테고리별 게시물 수 -->
	<select id="countCate" resultType="int">
		select count(post_seq) from
		post where category_seq = #{category_seq};
	</select>

	<!-- 게시물 총 개수 -->
	<select id="count" resultType="int">
		select count(*) from post

		<if test="keyword != null">
			where post_title like concat('%',#{keyword},'%')
		</if>

	</select>

	<!-- 게시물 목록 + 페이징 -->
	<select id="listPage" parameterType="PageVO" resultType="PostVO">
		select * from (
		select post_seq, post_title, price, upload_date,
		pay_check, location1
		from post

		<if test="keyword != null">
			where post_title like concat('%',#{keyword},'%')
		</if>

		order by upload_date desc) as T1
		limit #{displayPost},#{postNum}
	</select>

	<!-- 내상품 총 개수 -->
	<select id="myCount" resultType="int">
		select count(*) from post
		<if test="user_seq != null">
			where user_seq = #{user_seq}
		</if>

	</select>
	<!-- 내 상품 목록 -->
	<select id="myPageList" parameterType="PageVO"
		resultType="PostVO">
		select * from (
		select post_seq, post_title, price, upload_date,
		pay_check, location1
		from post
		<if test="user_seq != null">
			where user_seq = #{user_seq}
		</if>
		<if test="sort == null">
			order by post_seq desc
		</if>
		<if test="sort == 1">
			order by post_seq desc
		</if>
		<if test="sort == 2">
			order by cnt desc
		</if>
		<if test="sort == 3">
			order by price ASC
		</if>
		<if test="sort == 4">
			order by price desc
		</if>
		) as T1
		limit #{displayPost},#{postNum}
	</select>

	<!-- 카테고리 목록 + 페이징 -->
	<select id="catePage" parameterType="hashMap"
		resultType="PostVO">
		select * from post where category_seq = #{category_seq}
		order by post_seq desc limit #{displayPost}, #{postNum}
	</select>

	<!-- 신고하기 -->
	<insert id="postReport" parameterType="ReportVO">
		insert into
		post_reports(user_seq, user_singo_seq, post_seq, report_content,
		report_date) values(#{user_seq}, #{user_singo_seq}, #{post_seq},
		#{report_content}, now())
	</insert>

	<!-- 신고사유보기 -->
	<select id="reportReason" resultType="ReportVO">
		select * from post_reports
		where user_singo_seq=#{user_singo_seq} and user_seq=#{user_seq}
	</select>

	<!-- 신고했는지 안 했는지 -->
	<select id="reportStatus" parameterType="ReportVO"
		resultType="ReportVO">
		select * from post_reports where user_seq=#{user_seq} and
		post_seq = #{post_seq};
	</select>

	<!-- 탈퇴사유 -->
	<insert id="WithdrawalReason" parameterType="WithdrawalVO">
		insert into
		withdrawal(user_seq, withdrawal_content, create_date)
		values(#{user_seq},#{withdrawal_content}, now());
	</insert>

	<!-- 매너 평가 하기 -->
	<insert id="evaluation" parameterType="MyMannerVO">
		insert into myManner
		values(#{user_seq}, #{sell_user_seq},
		#{post_seq},#{manner_temp},#{manner_compliment},#{bad_manner},#{manner_review},now(),
		now());
	</insert>

	<!-- 상품후기 리스트 -->
	<select id="reviewList" resultType="MyMannerVO">
		select * from myManner where
		sell_user_seq = #{sell_user_seq};
	</select>

	<!-- 상품 후기 개수 -->
	<select id="reviewCount" resultType="int">
		select count(*) from
		myManner where sell_user_seq = #{sell_user_seq}
	</select>

	<!-- 정보 찾기 -->
	<select id="findKakao" parameterType="java.util.HashMap"
		resultType="UserVO">
		select * from user where nickname=#{nickname}
	</select>

	<!-- 정보 저장 -->
	<insert id="kakaoInsert" parameterType="java.util.HashMap">
		insert into
		user(id,name,password,birth,nickname,email,phone,msg_agree,join_type,profile_image,available,mail_auth,authority)
		values(#{email},#{nickname},#{password},'1111-01-01',#{nickname},#{email},'PHONE',0,1,#{profile_image},1,1,'ROLE_USER')
	</insert>

	<update id="locationInsert" parameterType="UserVO">
		update user set
		location1=#{location1},location2=#{location2} where id=#{id}
	</update>

	<update id="updateProfile" parameterType="UserVO">
		update user set
		password=#{password}, nickname=#{nickname} where id=#{id}
	</update>


	<update id="reloadUser" parameterType="UserVO">
		update user set
		birth=#{birth}, available=#{available} where id=#{id}
	</update>

	<update id="updatePw">
		update user set password = #{password}
		where email =
		#{email}
	</update>

	<update id="updateMailKey" parameterType="UserVO">
		update user set
		mail_key=#{mail_key} where email=#{email}
	</update>

	<update id="updateMailAuth" parameterType="UserVO">
		update user set
		mail_auth=1 where email=#{email} and mail_key=#{mail_key}
	</update>

	<select id="emailAuthFail" parameterType="String"
		resultType="int">
		select count(*) from user where id=#{id} and mail_auth=1
	</select>
	<select id="findNickName" parameterType="int"
		resultType="String">
		select nickname from user where user_seq=${user_seq};
	</select>


	<!-- 신고 당한 횟수 -->
	<update id="repNo">
		update user set rep_no = rep_no + 1 where user_seq =
		#{user_seq};
	</update>

	<!-- 파프리카페이 qr삽입 내일 이미지로 바꿔줭... -->
	<update id="updatePay">
		update user set pay=#{pay}, KID=#{KID} where id=#{id}
	</update>

	<!-- 파프리카페이 qr삽입 내일 이미지로 바꿔줭... -->
	<update id="updatePayPost">
		update post set pay=#{pay} where nickname=#{nickname}
	</update>

	<update id="updatePayStatus">
		update post set pay_status=#{pay_status} where
		post_seq=#{post_seq};
	</update>

	<insert id="insertPPKPay">
		insert into pay(pay_seq,sellerId, buyerId, post_seq,
		process, sellerQr, buyerQr, status, sellerKID, buyerKID)
		values(#{pay_seq},#{sellerId},#{buyerId},#{post_seq},#{process},#{sellerQr},#{buyerQr},1,#{sellerKID},#{buyerKID})
	</insert>

	<!-- notice 불러오기 -->
	<select id="selectNotice" resultType="NoticeVO">
		<![CDATA[select * from notice where sellerId=#{nickname} or buyerId=#{nickname} order by notice_seq desc]]>
	</select>

	<!-- notice 추가하기 -->
	<insert id="addNotice" parameterType="NoticeVO">
		insert into notice
		values(#{notice_seq}, #{buyerId}, #{sellerId}, #{seq}, 0,
		#{messageFrom}, #{action}, now())
	</insert>

	<!-- notice 삭제하기 0안읽음 1읽음 -->
	<delete id="deleteNotice">
		delete from notice where read_notice=1
	</delete>

	<!-- notice 읽음 처리 -->
	<update id="readNotice">
		update notice set read_notice=1 where
		notice_seq=#{notice_seq}
	</update>

	
	<!-- 매너온도 업데이트 -->
	<update id="updateMannerTemp">
		update user set temp=#{temp} where user_seq=#{user_seq};
	</update>
	
	<!-- 거래 확정시 구매목록에 넣어줌 -->
	<insert id="doneDeal" parameterType="DealVO">
		insert into deal values(#{deal_seq},#{user_seq},#{post_seq},#{price},now(),#{post_title})
	</insert>
	
	<!-- 구매목록 보여주기  -->
	<select id="doneDealList" resultType="DealVO">
		select * from deal where user_seq=#{user_seq}
	</select>
	
	<!-- 구매완료시 판매물품 상태 바꿔주기 -->
	<update id="updateSellProduct">
		update post set status=1 where post_seq=#{post_seq}
	</update>

	<!-- 1:1문의하기 보내기 -->
	<insert id="oneOnInsert">
		insert into oneOnOne(user_seq, content, create_date)
		values(#{user_seq},#{content},now())
	</insert>

	<!-- findReviewer -->
	<select id="findReviewer" resultType="String">
		select post_title from post where post_seq = #{post_seq};
	</select>

	<select id="Reviewer" resultType="String">
		select nickname from user where user_seq = #{user_seq};
	</select>

	<update id="upPost">
		update post set upload_date = now() where post_seq =
		#{post_seq}
	</update>

	<select id="mannerCount" parameterType="MyMannerVO" resultType="int">
		select count(*) from myManner where sell_user_seq = #{sell_user_seq} and
		manner_compliment like concat('%',#{manner_compliment},'%');
	</select>
	
	<select id="badCount" parameterType="MyMannerVO" resultType="int">
		select count(*) from myManner where sell_user_seq = #{sell_user_seq} and
		bad_manner like concat('%',#{bad_manner},'%');
	</select>
	
	<select id="related" parameterType="Integer" resultType="Integer">
		select post_seq from post where category_seq = #{category_seq} order by create_date desc limit 0, 5;
	</select>

</mapper>